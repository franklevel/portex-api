{
  "/Users/frank/Projects/node/portex-api": {
    "versionSfCore": null,
    "versionFramework": "4.2.3",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "/Users/frank/Projects/node/portex-api",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "portex-api",
      "build": {
        "esbuild": false
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AuthorizationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/portex-api-dev-authorizations"
              }
            },
            "ReservationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/portex-api-dev-reservations"
              }
            },
            "NotificationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/portex-api-dev-notifications"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "portex-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/portex-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/portex-api-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "portex-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AuthorizationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/portex-api/dev/1724516394418-2024-08-24T16:19:54.418Z/portex-api.zip"
                },
                "Handler": "src/handlers/authorizations.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "portex-api-dev-authorizations",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AuthorizationsLogGroup"
              ]
            },
            "ReservationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/portex-api/dev/1724516394418-2024-08-24T16:19:54.418Z/portex-api.zip"
                },
                "Handler": "src/handlers/reservations.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "portex-api-dev-reservations",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ReservationsLogGroup"
              ]
            },
            "NotificationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/portex-api/dev/1724516394418-2024-08-24T16:19:54.418Z/portex-api.zip"
                },
                "Handler": "src/handlers/notifications.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "portex-api-dev-notifications",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "NotificationsLogGroup"
              ]
            },
            "AuthorizationsLambdaVersion26b77hFLe7yhqCu2RGVT9uNdJYslpi66YxplBEX7l0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AuthorizationsLambdaFunction"
                },
                "CodeSha256": "M6I5kW0ATgrMjARaeSmr8xFNmgXNfJKrnHR6DltasSw="
              }
            },
            "ReservationsLambdaVersionDwCrCUltPajjBPAiQNUPtcHearTbLAWcK3J6wo3ROU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ReservationsLambdaFunction"
                },
                "CodeSha256": "M6I5kW0ATgrMjARaeSmr8xFNmgXNfJKrnHR6DltasSw="
              }
            },
            "NotificationsLambdaVersionXwSjEAod7aiffcCOij1arKnR9EVjkgMJxFMWla0e1ik": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "NotificationsLambdaFunction"
                },
                "CodeSha256": "M6I5kW0ATgrMjARaeSmr8xFNmgXNfJKrnHR6DltasSw="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-portex-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceAuthorizations": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "authorizations",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthorizationsProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuthorizations"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceReservations": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "reservations",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceReservationsProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceReservations"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceNotifications": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "notifications",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceNotificationsProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceNotifications"
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthorizationsProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthorizationsProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AuthorizationsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizationsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodReservationsProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceReservationsProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ReservationsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ReservationsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodNotificationsProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNotificationsProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "NotificationsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "NotificationsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1724516388257": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodAuthorizationsProxyVarAny",
                "ApiGatewayMethodReservationsProxyVarAny",
                "ApiGatewayMethodNotificationsProxyVarAny"
              ]
            },
            "AuthorizationsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AuthorizationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ReservationsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ReservationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "NotificationsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "NotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "portex-api-deployment-bucket-dev",
                "AccessControl": "Private",
                "VersioningConfiguration": {
                  "Status": "Enabled"
                }
              }
            },
            "ApiGatewayCloudFrontDistribution": {
              "Type": "AWS::CloudFront::Distribution",
              "Properties": {
                "DistributionConfig": {
                  "Enabled": true,
                  "Origins": [
                    {
                      "DomainName": {
                        "Fn::Sub": "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
                      },
                      "Id": "apiGatewayOrigin",
                      "CustomOriginConfig": {
                        "OriginProtocolPolicy": "https-only"
                      }
                    }
                  ],
                  "DefaultCacheBehavior": {
                    "TargetOriginId": "apiGatewayOrigin",
                    "ViewerProtocolPolicy": "redirect-to-https",
                    "AllowedMethods": [
                      "HEAD",
                      "GET",
                      "POST",
                      "PUT",
                      "PATCH",
                      "DELETE",
                      "OPTIONS"
                    ],
                    "ForwardedValues": {
                      "QueryString": true,
                      "Headers": [
                        "Authorization"
                      ]
                    }
                  }
                }
              }
            },
            "UserPool": {
              "Type": "AWS::Cognito::UserPool",
              "Properties": {
                "UserPoolName": "portex-api-user-pool",
                "AutoVerifiedAttributes": [
                  "email"
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-portex-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "AuthorizationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AuthorizationsLambdaVersion26b77hFLe7yhqCu2RGVT9uNdJYslpi66YxplBEX7l0"
              },
              "Export": {
                "Name": "sls-portex-api-dev-AuthorizationsLambdaFunctionQualifiedArn"
              }
            },
            "ReservationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ReservationsLambdaVersionDwCrCUltPajjBPAiQNUPtcHearTbLAWcK3J6wo3ROU"
              },
              "Export": {
                "Name": "sls-portex-api-dev-ReservationsLambdaFunctionQualifiedArn"
              }
            },
            "NotificationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "NotificationsLambdaVersionXwSjEAod7aiffcCOij1arKnR9EVjkgMJxFMWla0e1ik"
              },
              "Export": {
                "Name": "sls-portex-api-dev-NotificationsLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-portex-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-plugin-typescript",
        "serverless-offline"
      ],
      "functions": {
        "authorizations": {
          "handler": "src/handlers/authorizations.handler",
          "events": [
            {
              "http": {
                "path": "authorizations/{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "portex-api-dev-authorizations",
          "package": {
            "exclude": [
              "node_modules/serverless-plugin-typescript"
            ],
            "include": [],
            "patterns": []
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AuthorizationsLambdaVersion26b77hFLe7yhqCu2RGVT9uNdJYslpi66YxplBEX7l0"
        },
        "reservations": {
          "handler": "src/handlers/reservations.handler",
          "events": [
            {
              "http": {
                "path": "reservations/{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "portex-api-dev-reservations",
          "package": {
            "exclude": [
              "node_modules/serverless-plugin-typescript"
            ],
            "include": [],
            "patterns": []
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ReservationsLambdaVersionDwCrCUltPajjBPAiQNUPtcHearTbLAWcK3J6wo3ROU"
        },
        "notifications": {
          "handler": "src/handlers/notifications.handler",
          "events": [
            {
              "http": {
                "path": "notifications/{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "portex-api-dev-notifications",
          "package": {
            "exclude": [
              "node_modules/serverless-plugin-typescript"
            ],
            "include": [],
            "patterns": []
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "NotificationsLambdaVersionXwSjEAod7aiffcCOij1arKnR9EVjkgMJxFMWla0e1ik"
        }
      },
      "resources": {
        "Resources": {
          "DeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "portex-api-deployment-bucket-dev",
              "AccessControl": "Private",
              "VersioningConfiguration": {
                "Status": "Enabled"
              }
            }
          },
          "ApiGatewayCloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
              "DistributionConfig": {
                "Enabled": true,
                "Origins": [
                  {
                    "DomainName": {
                      "Fn::Sub": "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
                    },
                    "Id": "apiGatewayOrigin",
                    "CustomOriginConfig": {
                      "OriginProtocolPolicy": "https-only"
                    }
                  }
                ],
                "DefaultCacheBehavior": {
                  "TargetOriginId": "apiGatewayOrigin",
                  "ViewerProtocolPolicy": "redirect-to-https",
                  "AllowedMethods": [
                    "HEAD",
                    "GET",
                    "POST",
                    "PUT",
                    "PATCH",
                    "DELETE",
                    "OPTIONS"
                  ],
                  "ForwardedValues": {
                    "QueryString": true,
                    "Headers": [
                      "Authorization"
                    ]
                  }
                }
              }
            }
          },
          "UserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "portex-api-user-pool",
              "AutoVerifiedAttributes": [
                "email"
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: portex-api\nbuild:\n  esbuild: false\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  stage: dev\n  region: us-east-1\n\nplugins:\n  - serverless-plugin-typescript\n  - serverless-offline\n\nfunctions:\n  authorizations:\n    handler: src/handlers/authorizations.handler\n    events:\n      - http:\n          path: authorizations/{proxy+}\n          method: any\n\n  reservations:\n    handler: src/handlers/reservations.handler\n    events:\n      - http:\n          path: reservations/{proxy+}\n          method: any\n\n  notifications:\n    handler: src/handlers/notifications.handler\n    events:\n      - http:\n          path: notifications/{proxy+}\n          method: any\n\n  # Agregar los demás handlers aquí...\n\nresources:\n  Resources:\n    DeploymentBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: portex-api-deployment-bucket-dev\n        AccessControl: Private\n        VersioningConfiguration:\n          Status: Enabled\n#    DeploymentBucketPolicy:\n#      Type: AWS::S3::BucketPolicy\n#      Properties:\n#        Bucket: !Ref DeploymentBucket\n#        PolicyDocument:\n#          Version: \"2012-10-17\"\n#          Statement:\n#            - Effect: Allow\n#              Principal: \"*\"\n#              Action:\n#                - s3:GetObject\n#                - s3:PutObject\n#                - s3:PutBucketPolicy\n#              Resource: !GetAtt DeploymentBucket.Arn\n    ApiGatewayCloudFrontDistribution:\n      Type: AWS::CloudFront::Distribution\n      Properties:\n        DistributionConfig:\n          Enabled: true\n          Origins:\n            - DomainName: !Sub '${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'\n              Id: apiGatewayOrigin\n              CustomOriginConfig:\n                OriginProtocolPolicy: https-only\n          DefaultCacheBehavior:\n            TargetOriginId: apiGatewayOrigin\n            ViewerProtocolPolicy: redirect-to-https\n            AllowedMethods:\n              - HEAD\n              - GET\n              - POST\n              - PUT\n              - PATCH\n              - DELETE\n              - OPTIONS\n            ForwardedValues:\n              QueryString: true\n              Headers:\n                - Authorization\n\n    UserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: portex-api-user-pool\n        AutoVerifiedAttributes:\n          - email\n",
    "command": [
      "deploy"
    ],
    "options": {
      "stage": "dev"
    },
    "error": null,
    "params": {},
    "machineId": "716ada39bd68b86c7d038453c49d1745",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "87fd7562-b974-4b23-b9a8-0d1292eb7691",
    "orgName": "portex",
    "userId": "0N2gR9JhSckTNggMgF",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "portex",
    "subscription": null,
    "userEmail": "franklevel@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "743121302070",
    "projectType": "framework",
    "versionSf": "4.2.3",
    "serviceProviderAwsCfStackName": "portex-api-dev",
    "integrations": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:743121302070:stack/portex-api-dev/29c9a220-60b2-11ef-86f3-124141b20cc7",
    "serviceProviderAwsCfStackCreated": "2024-08-22T18:12:59.390Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-24T16:20:19.235Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AuthorizationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:743121302070:function:portex-api-dev-authorizations:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-portex-api-dev-AuthorizationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "NotificationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:743121302070:function:portex-api-dev-notifications:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-portex-api-dev-NotificationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://9k6inqfdid.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-portex-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "portex-api-dev-serverlessdeploymentbucket-llngj8zs52wl",
        "ExportName": "sls-portex-api-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "ReservationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:743121302070:function:portex-api-dev-reservations:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-portex-api-dev-ReservationsLambdaFunctionQualifiedArn"
      }
    ]
  }
}